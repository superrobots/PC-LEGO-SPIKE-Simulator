from visualization import HubVisualizer

class Light_matrix:
	#If ISDEBUG is true. then all modules send debug information through console
	ISDEBUG = True

	HEART = "09090:99999:99999:09990:00900"
	HEART_SMALL =  "00000:09090:09990:00900:00000"
	HAPPY =  "00000:09090:00000:90009:09990"
	ASLEEP =  "00000:99099:00000:09990:00000"
	SMILE =  "00000:00000:00000:90009:09990"
	SAD =  "00000:09090:00000:09990:90009"
	CONFUSED =  "00000:09090:00000:09090:90909"
	ANGRY =  "90009:09090:00000:99999:90909"
	SURPRISED =  "09090:00000:00900:09090:00900"
	SILLY =  "90009:00000:99999:00909:00999"
	FABULOUS =  "99999:99099:00000:09090:09990"
	MEH =  "09090:00000:00090:00900:09000"
	YES =  "00000:00009:00090:90900:09000"
	NO =  "90009:09090:00900:09090:90009"
	CLOCK12 =  "00900:00900:00900:00000:00000"
	CLOCK1 =  "00090:00090:00900:00000:00000"
	CLOCK2 =  "00000:00099:00900:00000:00000"
	CLOCK3 =  "00000:00000:00999:00000:00000"
	CLOCK4 =  "00000:00000:00900:00099:00000"
	CLOCK5 =  "00000:00000:00900:00090:00090"
	CLOCK6 =  "00000:00000:00900:00900:00900"
	CLOCK7 =  "00000:00000:00900:09000:09000"
	CLOCK8 =  "00000:00000:00900:99000:00000"
	CLOCK9 = "00000:00000:99900:00000:00000"
	CLOCK10 = "00000:99000:00900:00000:00000"
	CLOCK11 = "09000:09000:00900:00000:00000"
	ARROW_N = "00900:09990:90909:00900:00900"
	ARROW_NE = "00999:00099:00909:09000:90000"
	ARROW_E = "00900:00090:99999:00090:00900"
	ARROW_SE = "90000:09000:00909:00099:00999"
	ARROW_S = "00900:00900:90909:09990:00900"
	ARROW_SW = "00009:00090:90900:99000:99900"
	ARROW_W = "00900:09000:99999:09000:00900"
	ARROW_NW = "99900:99000:90900:00090:00009"
	GO_RIGHT = "09000:09900:09990:09900:09000"
	GO_LEFT = "00090:00990:09990:00990:00090"
	GO_UP = "00000:00900:09990:99999:00000"
	GO_DOWN = "00000:99999:09990:00900:00000"
	TRIANGLE = "00000:00900:09090:99999:00000"
	TRIANGLE_LEFT = "90000:99000:90900:90090:99999"
	CHESSBOARD =  "09090:90909:09090:90909:09090"
	DIAMOND =  "00900:09090:90009:09090:00900"
	DIAMOND_SMALL =  "00000:00900:09090:00900:00000"
	SQUARE =  "99999:90009:90009:90009:99999"
	SQUARE_SMALL =  "00000:09990:09090:09990:00000"
	RABBIT =  "90900:90900:99990:99090:99990"
	COW =  "90009:90009:99999:09990:00900"
	MUSIC_CROTCHET =  "00900:00900:00900:99900:99900"
	MUSIC_QUAVER =  "00900:00990:00909:99900:99900"
	MUSIC_QUAVERS =  "09999:09009:09009:99099:99099"
	PITCHFORK =  "90909:90909:99999:00900:00900"
	XMAS =  "00900:09990:00900:09990:99999"
	PACMAN =  "09999:99090:99900:99990:09999"
	TARGET =  "00900:09990:99099:09990:00900"
	TSHIRT =  "99099:99999:09990:09990:09990"
	ROLLERSKATE =  "00099:00099:99999:99999:09090"
	DUCK =  "09900:99900:09999:09990:00000"
	HOUSE =  "00900:09990:99999:09990:09090"
	TORTOISE =  "00000:09990:99999:09090:00000"
	BUTTERFLY =  "99099:99999:00900:99999:99099"
	STICKFIGURE =  "00900:99999:00900:09090:90009"
	GHOST =  "99999:90909:99999:99999:90909"
	SWORD =  "00900:00900:00900:09990:00900"
	GIRAFFE =  "99000:09000:09000:09990:09090"
	SKULL =  "09990:90909:99999:09990:09990"
	UMBRELLA =  "09990:99999:00900:90900:09900"
	SNAKE =  "99000:99099:09090:09990:00000"
	ALL_CLOCKS =  "00900:00900:00900:00000:00000"
	ALL_ARROWS =  "00900:09990:90909:00900:00900"
	
	def __init__(self, visualizer=None) :
		self.visualizer = visualizer
		if self.ISDEBUG:
			print("Light Matrix is initialised in debug mode. Simulation change at spike.light_matrix.py ")

	def _image_string_to_matrix(self, image_string):
		"""Convert image string like '09090:99999:...' to 5x5 matrix of 1/0."""
		rows = image_string.split(":")
		matrix = []
		for row in rows:
			matrix.append([1 if c == "9" else 0 for c in row])
		return matrix

	def show_image(self,image, brightness=100):
		if self.ISDEBUG:
			print("Shows an image on the Light Matrix.")
		imagematrix = getattr(self, image, None)
		if imagematrix is None:
			imagematrix = "00000:00000:00000:00000:00000"
		matrix = self._image_string_to_matrix(imagematrix)
		if self.visualizer:
			self.visualizer.update_light_matrix(matrix)

	def off(self):
		if self.visualizer:
			self.visualizer.update_light_matrix([[0]*5 for _ in range(5)])

	def set_pixel(self,x, y, brightness=100):
		if self.visualizer:
			# Get current matrix or create a blank one
			matrix = [[0]*5 for _ in range(5)]
			matrix[y][x] = 1 if brightness > 0 else 0
			self.visualizer.update_light_matrix(matrix)

	def write(self, text):
		# For simplicity, just turn on the center pixel for any text
		if self.visualizer:
			matrix = [[0]*5 for _ in range(5)]
			matrix[2][2] = 1
			self.visualizer.update_light_matrix(matrix)
